МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»







ЗВІТ
З Практичної роботи № 2
з дисципліни
«Архітектура програмного забезпечення»





Виконав
ст. гр. ПЗПІ-22-8
Ставицький Олександр
Перевірив
ст. викладач каф. ПІ
Сокорчук І. П.



Харків 2025
1 ІСТОРІЯ ЗМІН

	У цьому розділі відображено історію внесених змін до звіту, що наведено у табл. 1.

	Таблиця 1 – Історія змін
№
Дата
Версія
Опис змін
Автор
1
08.05.2025
0.1
Створено розділ «Завдання»
Ставицький Олександр
2
08.05.2025
0.1
Створено розділ «Опис виконаної роботи»
Ставицький Олександр
3
08.05.2025
0.1
Створено розділ «Висновки»
Ставицький Олександр
4
09.05.2025
0.1
Додано слайди презентації в додатку Б
Ставицький Олександр
5
09.05.2025
0.1
Додано програмний код в додатку В
Ставицький Олександр
6
10.05.2025
0.1
Додано посилання на відео  в додатку А та створено хронологічний опис
Ставицький Олександр
2 ЗАВДАННЯ

     Метою цієї практичної роботи було дослідження та аналіз архітектури програмної системи Discord. В рамках цієї роботи треба було дослідити архітектурні рішення, технологічний стек системи,  а також розглянути особливості системи.
     
     
3 ОПИС ВИКОНАНОЇ РОБОТИ
     
     У рамках практичної роботи було досліджено архітектуру програмної системи Discord — одного з найпопулярніших у світі засобів комунікації для спільнот, геймерів і командної роботи. Дослідження охоплює еволюцію системи, технічні аспекти реалізації та приклади використання патерна "Посередник" у її архітектурі.
     Discord — це багатофункціональна платформа для обміну повідомленнями, голосового та відеозв’язку, створена у 2015 році Джейсоном Сітроном і Стеном Вишневським. Первинно орієнтована на геймерів, платформа швидко здобула популярність серед широкого кола користувачів і сьогодні має понад 500 мільйонів зареєстрованих акаунтів. Discord доступний як у веб-версії, так і на десктопних та мобільних платформах (Windows, macOS, Linux, Android, iOS), з можливістю створення серверів, каналів, інтеграції ботів, обміну медіа та спільної роботи.
     Початкові версії Discord будувалися як монолітна система на Elixir — мові програмування, що працює поверх Erlang VM та оптимізована для розподілених систем з великою кількістю підключень. Завдяки цьому Discord з самого початку міг обробляти сотні тисяч одночасних з’єднань з мінімальними затримками. У подальшому архітектура розвивалася у напрямку мікросервісної, щоб забезпечити масштабованість і гнучкість розробки.
     Використовуються сервіси для:
* аутентифікації й управління користувачами;
* обробки повідомлень;
* управління каналами та серверами;
* стрімінгу аудіо/відео;
* модерації та аналітики;
* інтеграції ботів.
     Уся система об’єднана за допомогою event-driven (подієво-орієнтованої) архітектури, де компоненти не взаємодіють напряму, а через централізовані диспетчери подій. Це класичне використання патерна "Посередник" (Mediator), який координує дії між учасниками без їх прямого зв’язку.
     Технологічний стек Discord:
* Бекенд: Elixir, Rust, Go, Python
* Фронтенд: React.js, TypeScript
* Інфраструктура: AWS, Docker, Kubernetes
* Комунікація: WebSocket, gRPC
* База даних: PostgreSQL, Cassandra, Redis
* Обробка подій: Kafka, RabbitMQ
     Патерн "Посередник" використовується в Discord для обробки подій: надходження повідомлення, зміни статусу користувача, підключення до голосового каналу тощо. Замість прямого зв’язку між клієнтом, каналом, користувачем і ботами, система використовує централізований event dispatcher, який розподіляє події до відповідних обробників.
Це дозволяє:
* зменшити зв'язаність компонентів;
* динамічно змінювати логіку без змін у кожному модулі;
* масштабувати систему без порушення залежностей.
     Програмний код прикладу використання патерну «Посередник» Наведено в додатку В.
     4 ВИСНОВКИ
     
     Під час виконання цієї практичної роботи було досліджено та проаналізовано архітектуру програмної системи Discord. В рамках цієї роботи було досліджено архітектурні рішення, технологічний стек системи,  а також розглянути особливості системи.

ДОДАТОК А

	Посилання на відеозапис доповіді та хронологічний опис.
     Відеозапис доповіді на YouTube: https://youtu.be/QNCKl_EtOGY 
     Хронологічний опис:
     00:00 - початок 
     00:19 - про Discord 
     00:40 - платформи Discord 
     01:12 - початок Discord 
     01:54 - технічний стек Discord 
     02:27 - патерн "Посередник" в Discord 
     03:10 - приклад патерну "Посередник" в Discord 
     03:39 - дякую за увагу


ДОДАТОК Б

     Слайди презентації доповіді
     
     
     Рис. 1 – тутульний слайд
     
     
     Рис. 2 – про Discord
     
     Рис. 3 – платформи Discord
     
     
     Рис. 4 – Початок Discord
     
     
     Рис. 5 – Технічний стек Discord
     
     
     Рис. 6 – Патерн «Посередник» в Discord
     
     
     Рис. 7 – Початок Discord
     
     
     Рис. 8 – Дякую за увагу
     
     


ДОДАТОК В

Програмний код

import discord
from discord.ext import commands

intents = discord.Intents.default()
intents.message_content = True 
bot = commands.Bot(command_prefix='!', intents=intents)

# === Обробка команд (Посередник) ===
@bot.event
async def on_ready():
    print(f'Бот підключено як {bot.user}')

@bot.command()
async def ping(ctx):
    await ctx.send('Pong!')

@bot.command()
async def help(ctx):
    await ctx.send('Доступні команди: !ping, !help')

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        cmd = ctx.message.content.split()[0][1:]
        await ctx.send(f'Невідома команда: {cmd}')

bot.run('TOKEN') 
