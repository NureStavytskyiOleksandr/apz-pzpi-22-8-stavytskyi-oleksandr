МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»






ЗВІТ
З Лабораторної роботи № 3
з дисципліни
«Архітектура програмного забезпечення»





Виконав
ст. гр. ПЗПІ-22-8
Ставицький Олександр
Перевірив
ст. викладач каф. ПІ
Сокорчук І. П.




Харків 2025
1 ІСТОРІЯ ЗМІН

	У цьому розділі відображено історію внесених змін до звіту, що наведено у табл. 1.

	Таблиця 1 – Історія змін
№
Дата
Версія
Опис змін
Автор
1
21.05.2025
0.1
Створено розділ «Завдання»
Ставицький Олександр
2
21.05.2025
0.1
Створено розділ «Опис виконаної роботи»
Ставицький Олександр
3
21.05.2025
0.1
Створено розділ «Висновки»
Ставицький Олександр
2 ЗАВДАННЯ

	У рамках виконання цієї лабораторної роботи треба було розробити веб частину для програмної системи відповідно до обраної теми. Необхідно проаналізувати та описати створені компоненти системи.

3 ОПИС ВИКОНАНОЇ РОБОТИ

	3.1 Розробка Use Case діаграми

	Під час виконання лабораторної роботи була розроблена Use Case діаграма перецедентів (див. рис. 3.1). На дій діаграмі ми можемо бачити двох акторів: супер адмін, адмін парковок. А також дії які вони можуть виконувати на веб сайті програмної системи.

Рис. 3.1 – Use Case діаграма

	3.1 Розробка діаграми компонентів

	Була розроблена діаграма компонентів (див. рис. 3.2). На ній ми можемо бачити такі компоненти: авторизація, управління системою, управління парковками.


Рис. 3.2 – діаграма компонентів
	3.3 Створення діаграми взаємодії

	Була розроблена діаграма взаємодії (див. рис. 3.3). На ній ми можемо побачити дії супер адміністратора в веб частині програмної системи.


Рис. 3.3 – діаграма взаємодії

     3.4 Створення діаграми діяльності
     
     	Під час виконання лабораторної роботи була розроблена діаграма діяльності (див. рис. 3.4). На ній ми можемо побачити діяльність супер адміністратора на веб сайті програмної системи.

Рис. 3.4 – діаграма діяльності

     3.5 Створення веб частини програмної системи
     
     	Була створена веб частина програмної системи. Частину коду можна переглянути в додатку Б. Веб частина створена для використання адміністраторами програмної частини. Супер адміністратор керує парковками, користувачами, призначає адміністраторів парковок та може зробити бекап бази даних. В свою чергу адміністратори парковок керують доступними їм парковками. Керують групами користувачів, групами паркомісць, паркомісцями, ІоТ пристроями, доступом груп користувачів до груп паркомісць, а також може переглянути статистику відповідно до обраної парковки.


     4 ВИСНОВКИ

	Під час виконання цієї лабораторної роботи було розроблено веб частину для програмної системи відповідно до обраної теми. Також були розроблені такі діаграми: Use Case діаграма, діаграма компонентів, діаграма взаємодії, діаграма діяльності.


Додаток А

	Посилання на відеозапис доповіді та хронологічний опис.
Відеозапис доповіді на YouTube: https://youtu.be/yTFr0UteZos 
     Хронологічний опис:
     00:00 - початок 
     00:22 - запуск сервера 
     00:38 - вхід 
     01:05 - керування парковками 
     01:37 - керування користувачами 
     02:09 - призначення парковок 
     02:21 - бекап бази даних 
     02:43 - вхід іншої ролі 
     02:55 - статистика 
     03:13 - групи користуваів 
     03:55 - групи паркомісць 
     04:29 - керування паркомісцями 
     04:56 - керування ІоТ пристроями 
     05:23 - зв'язок груп користувачів і груп паркомісць 
     06:07 - намагання зайти як звичайний юзер 
     06:20 - дякую за увагу

     


Додаток Б
Програмний код авторизації веб частини


const API_BASE_URL = 'http://localhost:3000';

const loginForm = document.getElementById('loginForm');
const loginError = document.getElementById('loginError');

// Перевірка авторизації
function checkAuth() {
  const token = localStorage.getItem('token');
  const role = localStorage.getItem('role');
  if (token && role) {
    window.location.href = 'dashboard.html';
  }
}

// Обробка логіну
loginForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  const email = document.getElementById('email').value;
  const password = document.getElementById('password').value;

  try {
    const response = await fetch(`${API_BASE_URL}/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    });
    const data = await response.json();
    if (response.ok) {
      localStorage.setItem('token', data.token);
      localStorage.setItem('role', data.role);
      loginError.textContent = '';
      window.location.href = 'dashboard.html';
    } else {
      loginError.textContent = data.error || 'Помилка входу';
    }
  } catch (err) {
    loginError.textContent = 'Помилка сервера';
  }
});

// Ініціалізація
checkAuth();
